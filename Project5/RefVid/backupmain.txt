////////////////////////////////////////////////////////
// ECE 3574, Homework 5, Bowei Zhao
//// inID: 905789193
// email: bowei@vt.edu
// File name: main.cpp
// Description: main implementation file
// Date: 4/09/2016
//
// *-----------------------------------------------* //
//#include "notification.h"
#include <pthread.h>
#include <mqueue.h>
#include <errno.h>

#include <QString>
#include <QTextStream>
#include <QStringList>
#include <QList>
#include <QDebug>
#include <QByteArray>
#include <QtGui>
#include <QWidget>
#include <QApplication>
#include <QMainWindow>
#include <QCoreApplication>

#include <sys/types.h>
#include <sys/stat.h>
#include <sys/shm.h>
#include <sys/wait.h>
#include <sys/mman.h>


#include <time.h>
#include <ctime>
#include <iostream>
#include <fstream>
#include <string>
#include <exception>
#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>

using namespace std;

QTextStream outS(stdout); // output stream for standard output
QTextStream inS(stdin); // input stream for standard input
QTextStream errS(stderr); // error stream for standard error exception
void ProcessAllTemps();

int ID;
float parent_temp, down_temp, up_temp, child_a_temp, child_b_temp;
QString notification;


int main(int argc, char *argv[])
{
	int send_to_children = 1;
	mqd_t mq70, mq71, mq72, mq73, mq74, mq75, mq76;
	bool notstable = true;
	char* RxGet = new char[8192];
    char* TxSend = new char();
    QString begin = "begin";
    QString outputnow = "outputnow";

	QCoreApplication app(argc, argv);
    QStringList arginput = app.arguments();
	int initialSuccess = StartupErrorCheck(argc, arginput);
	//qDebug() << "\nSuccess reach with output StartupErrorCheck =" << initialSuccess << endl;

	bool initok;
	if (initialSuccess == 1)
	{
		
	}
		
		
		ID = arginput[1].toInt(&initok, 10);
		parent_temp = arginput[2].toFloat(&initok);
		//ID = QString(argv[1]).toInt(&initok);
		//parent_temp = QString(argv[2]).toFloat(&initok);
		qDebug() << "Input args of " << ID << parent_temp << endl;
		if (ID == 6)
		{
			outS << "ID 6" << endl;
			mq76 = mq_open("/76",  O_RDONLY | O_CREAT | O_EXCL, 0666, NULL);
			if (mq76 < 0)
			{
				errS << "\nERROR: Was not able to create queue for ID 6. Exiting" << endl;
	            mq_unlink("/70");
	            mq_close(mq70);
	            mq_unlink("/71");
	            mq_close(mq71);
	            mq_unlink("/72");
	            mq_close(mq72);
	            mq_unlink("/73");
	            mq_close(mq73);
	            mq_unlink("/74");
	            mq_close(mq74);
	            mq_unlink("/75");
	            mq_close(mq75);
	            mq_unlink("/76");
	            mq_close(mq76);				
			}

			while(notstable == true)
			{
				qDebug() << "ID 6 not outputnow" << endl;
				mq_receive(mq76, RxGet, 8192, NULL);

				notification = QString::fromLocal8Bit(RxGet);
				if (notification == "begin")
				{
					mq72 = mq_open("/72", O_RDWR, NULL, NULL);
				}
				else if (notification == "outputnow")
				{
					notstable = false;
					outS << "Process #" << ID << " : Final Temperature " << parent_temp;
				}
				else
				{
					ProcessAllTemps();


					qDebug() << "Process # " << ID << " : Current Temperature " << parent_temp;
					TxSend = QString::number(parent_temp).toLocal8Bit().data();
					mq_send(mq72, TxSend, 8192, 1);


				}
			}
		}
		else if (ID == 5)
		{
			outS << "ID " << ID << endl;
			mq75 = mq_open("/75",  O_RDONLY | O_CREAT | O_EXCL, 0666, NULL);
			if (mq75 < 0)
			{
				errS << "\nERROR: Was not able to create queue for ID " << ID  << ". Exiting now" << endl;
	            mq_unlink("/70");
	            mq_close(mq70);
	            mq_unlink("/71");
	            mq_close(mq71);
	            mq_unlink("/72");
	            mq_close(mq72);
	            mq_unlink("/73");
	            mq_close(mq73);
	            mq_unlink("/74");
	            mq_close(mq74);
	            mq_unlink("/75");
	            mq_close(mq75);
	            mq_unlink("/76");
	            mq_close(mq76);				
			}
			while (notstable == true)
			{
				mq_receive(mq75, RxGet, 8192, NULL);

				notification = QString::fromLocal8Bit(RxGet);
				if (notification == "begin")
				{
					mq72 = mq_open("/72", O_RDWR, NULL, NULL);
				}
				else if (notification == "outputnow")
				{
					notstable = false;
					outS << "Process #" << ID << " : Final Temperature " << parent_temp;
				}
				else
				{
					ProcessAllTemps();


					outS << "Process #" << ID << " : Current Temperature " << parent_temp;
					TxSend = QString::number(parent_temp).toLocal8Bit().data();
					mq_send(mq72, TxSend, 8192, 1);


				}
			}			

		}
		else if (ID == 4)
		{
			outS << "ID " << ID << endl;
			mq74 = mq_open("/74",  O_RDONLY | O_CREAT | O_EXCL, 0666, NULL);
			if (mq74 < 0)
			{
				errS << "\nERROR: Was not able to create queue for ID " << ID  << ". Exiting now" << endl;
	            mq_unlink("/70");
	            mq_close(mq70);
	            mq_unlink("/71");
	            mq_close(mq71);
	            mq_unlink("/72");
	            mq_close(mq72);
	            mq_unlink("/73");
	            mq_close(mq73);
	            mq_unlink("/74");
	            mq_close(mq74);
	            mq_unlink("/75");
	            mq_close(mq75);
	            mq_unlink("/76");
	            mq_close(mq76);				
			}
			while (notstable == true)
			{
				mq_receive(mq74, RxGet, 8192, NULL);
				notification = QString::fromLocal8Bit(RxGet);
				if (notification == "begin")
				{
					mq71 = mq_open("/71", O_RDWR, NULL, NULL);
				}
				else if (notification == "outputnow")
				{
					notstable = false;
					outS << "Process #" << ID << " : Final Temperature " << parent_temp;
				}
				else
				{
					ProcessAllTemps();


					outS << "Process #" << ID << " : Current Temperature " << parent_temp;
					TxSend = QString::number(parent_temp).toLocal8Bit().data();
					mq_send(mq71, TxSend, 8192, 1);


				}
			}				
		}
		else if (ID == 3)
		{
			outS << "ID " << ID << endl;
			mq73 = mq_open("/73",  O_RDONLY | O_CREAT | O_EXCL, 0666, NULL);
			if (mq73 < 0)
			{
				errS << "\nERROR: Was not able to create queue for ID " << ID  << ". Exiting now" << endl;
	            mq_unlink("/70");
	            mq_close(mq70);
	            mq_unlink("/71");
	            mq_close(mq71);
	            mq_unlink("/72");
	            mq_close(mq72);
	            mq_unlink("/73");
	            mq_close(mq73);
	            mq_unlink("/74");
	            mq_close(mq74);
	            mq_unlink("/75");
	            mq_close(mq75);
	            mq_unlink("/76");
	            mq_close(mq76);				
			}
			while (notstable == true)
			{
				mq_receive(mq73, RxGet, 8192, NULL);
				notification = QString::fromLocal8Bit(RxGet);
				if (notification == "begin")
				{
					mq71 = mq_open("/71", O_RDWR, NULL, NULL);
				}
				else if (notification == "outputnow")
				{
					notstable = false;
					outS << "Process #" << ID << " : Final Temperature " << parent_temp;
				}
				else
				{
					ProcessAllTemps();
					outS << "Process #" << ID << " : Current Temperature " << parent_temp;
					TxSend = QString::number(parent_temp).toLocal8Bit().data();
					mq_send(mq71, TxSend, 8192, 1);


				}
			}			
		}
		else if (ID == 2)
		{
			outS << "ID " << ID << endl;

			mq72 = mq_open("/72",  O_RDONLY | O_CREAT | O_EXCL, 0666, NULL);
			mq75 = mq_open("/75", O_RDWR, NULL, NULL);
			mq76 = mq_open("/76", O_RDWR, NULL, NULL);

			if (mq72 < 0)
			{
				errS << "\nERROR: Was not able to create queue for ID " << ID  << ". Exiting now" << endl;
	            mq_unlink("/70");
	            mq_close(mq70);
	            mq_unlink("/71");
	            mq_close(mq71);
	            mq_unlink("/72");
	            mq_close(mq72);
	            mq_unlink("/73");
	            mq_close(mq73);
	            mq_unlink("/74");
	            mq_close(mq74);
	            mq_unlink("/75");
	            mq_close(mq75);
	            mq_unlink("/76");
	            mq_close(mq76);				
			}
			while (notstable == true)
			{
				mq_receive(mq72, RxGet, 8192, NULL);				
				notification = QString::fromLocal8Bit(RxGet);

				mq70 = mq_open("/70", O_WRONLY, NULL, NULL);
				if (notification == "begin")
				{
					TxSend = notification.toLocal8Bit().data();
	                mq_send(mq75, TxSend, 8192, 1);
	                mq_send(mq76, TxSend, 8192, 1); 
				}
				else if (notification == "outputnow")
				{
					notstable = false;
					TxSend = notification.toLocal8Bit().data();
	                mq_send(mq75, TxSend, 8192, 1);
	                mq_send(mq76, TxSend, 8192, 1); 
					outS << "Process #" << ID << " : Final Temperature " << parent_temp;
				}
				else if (send_to_children == 1)
				{
					down_temp = (parent_temp + notification.toFloat())/2.0;
					parent_temp = down_temp;
					send_to_children = 0;
					TxSend = QString::number(parent_temp).toLocal8Bit().data();
	                mq_send(mq75, TxSend, 8192, 1);
	                mq_send(mq76, TxSend, 8192, 1); 

				}
				else
				{

					child_a_temp = notification.toFloat();
					mq_receive(mq72, RxGet, 8192, NULL);
					notification = QString::fromLocal8Bit(RxGet);
					child_b_temp = notification.toFloat();

					up_temp = (parent_temp + child_a_temp + child_b_temp) / 3;
					parent_temp = up_temp;

					send_to_children = 1;



					outS << "Process #" << ID << " : Current Temperature " << parent_temp;
					TxSend = QString::number(parent_temp).toLocal8Bit().data();
					mq_send(mq70, TxSend, 8192, 1);


				}
			}			
		}
		else if (ID == 1)
		{
			outS << "ID " << ID << endl;

			mq71 = mq_open("/71",  O_RDONLY | O_CREAT | O_EXCL, 0666, NULL);
			mq73 = mq_open("/73", O_RDWR, NULL, NULL);
			mq74 = mq_open("/74", O_RDWR, NULL, NULL);

			if (mq71 < 0)
			{
				errS << "\nERROR: Was not able to create queue for ID " << ID  << ". Exiting now" << endl;
	            mq_unlink("/70");
	            mq_close(mq70);
	            mq_unlink("/71");
	            mq_close(mq71);
	            mq_unlink("/72");
	            mq_close(mq72);
	            mq_unlink("/73");
	            mq_close(mq73);
	            mq_unlink("/74");
	            mq_close(mq74);
	            mq_unlink("/75");
	            mq_close(mq75);
	            mq_unlink("/76");
	            mq_close(mq76);				
			}
			while (notstable == true)
			{
				mq_receive(mq71, RxGet, 8192, NULL);				
				notification = QString::fromLocal8Bit(RxGet);

				mq70 = mq_open("/70", O_WRONLY, NULL, NULL);

				if (notification == "begin")
				{
					TxSend = notification.toLocal8Bit().data();
	                mq_send(mq73, TxSend, 8192, 1);
	                mq_send(mq74, TxSend, 8192, 1); 
				}
				else if (notification == "outputnow")
				{
					notstable = false;
					TxSend = notification.toLocal8Bit().data();
	                mq_send(mq73, TxSend, 8192, 1);
	                mq_send(mq74, TxSend, 8192, 1); 
					outS << "Process #" << ID << " : Final Temperature " << parent_temp;
				}
				else if (send_to_children == 1)
				{
					down_temp = (parent_temp + notification.toFloat())/2.0;
					parent_temp = down_temp;
					send_to_children = 0;
					TxSend = QString::number(parent_temp).toLocal8Bit().data();
	                mq_send(mq73, TxSend, 8192, 1);
	                mq_send(mq74, TxSend, 8192, 1); 

				}
				else
				{

					child_a_temp = notification.toFloat();
					mq_receive(mq71, RxGet, 8192, NULL);
					notification = QString::fromLocal8Bit(RxGet);
					child_b_temp = notification.toFloat();

					up_temp = (parent_temp + child_a_temp + child_b_temp) / 3;
					parent_temp = up_temp;

					send_to_children = 1;



					outS << "Process #" << ID << " : Current Temperature " << parent_temp;
					TxSend = QString::number(parent_temp).toLocal8Bit().data();
					mq_send(mq70, TxSend, 8192, 1);


				}
			}				
		}
		else if (ID == 0)
		{
			qDebug() << "First ID instance" << endl;
			mq70 = mq_open("/70",  O_RDONLY | O_CREAT | O_EXCL, 0666, NULL);
			mq71 = mq_open("/71", O_RDWR, NULL, NULL);
			mq72 = mq_open("/72", O_RDWR, NULL, NULL);

			TxSend = begin.toLocal8Bit().data();
            mq_send(mq71, TxSend, 8192, 1);
            mq_send(mq72, TxSend, 8192, 1); 

			TxSend = QString::number(parent_temp).toLocal8Bit().data();
            mq_send(mq71, TxSend, 8192, 1);
            mq_send(mq72, TxSend, 8192, 1); 


			outS << "ID " << ID << endl;
			qDebug() << "Second ID instance" << endl;
			mq70 = mq_open("/70", O_RDWR, 0666, NULL);
			mq71 = mq_open("/71", O_RDWR, NULL, NULL);
			mq72 = mq_open("/72", O_RDWR, NULL, NULL);

			if (mq70 < 0)
			{
				errS << "\nERROR: Was not able to create queue for ID " << ID  << ". Exiting now" << endl;
	            mq_unlink("/70");
	            mq_close(mq70);
	            mq_unlink("/71");
	            mq_close(mq71);
	            mq_unlink("/72");
	            mq_close(mq72);
	            mq_unlink("/73");
	            mq_close(mq73);
	            mq_unlink("/74");
	            mq_close(mq74);
	            mq_unlink("/75");
	            mq_close(mq75);
	            mq_unlink("/76");
	            mq_close(mq76);				
			}
			while (notstable == true)
			{
				mq_receive(mq70, RxGet, 8192, NULL);				
				notification = QString::fromLocal8Bit(RxGet);

				child_a_temp = notification.toFloat();
				mq_receive(mq70, RxGet, 8192, NULL);

				notification = QString::fromLocal8Bit(RxGet);
				child_b_temp = notification.toFloat();

				up_temp = (parent_temp + child_a_temp + child_b_temp) / 3;
				down_temp = up_temp;/*
				float compareT = parent_temp - up_temp;
				if (compareT < 0)
				{
					compareT = compareT*(-1);
				}

				if (compareT < 0.01)
				{
					qDebug() << " RAN compare up down ABS" << endl;
					parent_temp = up_temp;
					notstable = false;
					outS << "Process #" << ID << " : Final Temperature " << parent_temp;
					TxSend = outputnow.toLocal8Bit().data();
					mq_send(mq71, TxSend, 8192, 1);
					mq_send(mq72, TxSend, 8192, 1);

				}
				*/
				if (qAbs(parent_temp - up_temp) < 0.01)
				{
					qDebug() << " RAN compare up down ABS" << endl;
					parent_temp = up_temp;
					notstable = false;

					outS << "Process #" << ID << " : Final Temperature " << parent_temp;
					TxSend = outputnow.toLocal8Bit().data();
					mq_send(mq71, TxSend, 8192, 1);
					mq_send(mq72, TxSend, 8192, 1);
				}
				else
				{
					parent_temp = up_temp;
					outS << "Process #" << ID << " : Current Temperature " << parent_temp;
					TxSend = QString::number(parent_temp).toLocal8Bit().data();
					mq_send(mq71, TxSend, 8192, 1);
					mq_send(mq72, TxSend, 8192, 1);


				}


			}				

		}

    mq_unlink("/70");
    mq_close(mq70);
    mq_unlink("/71");
    mq_close(mq71);
    mq_unlink("/72");
    mq_close(mq72);
    mq_unlink("/73");
    mq_close(mq73);
    mq_unlink("/74");
    mq_close(mq74);
    mq_unlink("/75");
    mq_close(mq75);
    mq_unlink("/76");
    mq_close(mq76);

	return 0;
}

void ProcessAllTemps()
{
	down_temp = (parent_temp + notification.toFloat())/2.0;
	parent_temp = down_temp;
	up_temp = down_temp;
}